#
# Time & Date
#
# Manipulates time and dates to make them more human-friendly.
#
# Using a date sensor instead of now() inside templates avoids constant updates.
#
# @link https://home-assistant.io/components/sensor.time_date/
#
- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'time_date'

- platform: template
  sensors:
    date_friendly:
      friendly_name: Date
      icon_template: mdi:calendar-today
      friendly_name_template: >-
        {% set date = states('sensor.date') %}
        {% set datetime = strptime(date, '%Y-%m-%d') %}
        {{ datetime.strftime('%A') }}
      value_template: >-
        {% set date = states('sensor.date') %}
        {% set datetime = strptime(date, '%Y-%m-%d') %}
        {% set month = datetime.strftime('%B') %}
        {% set day = datetime.strftime('%d') | int %}

        {{ month }} {{ day }}

    date_long:
      friendly_name: Date
      icon_template: mdi:calendar-today
      value_template: >-
        {% set date = states('sensor.date') %}
        {% set datetime = strptime(date, '%Y-%m-%d') %}
        {% set weekday = datetime.strftime('%A') %}
        {% set month = datetime.strftime('%B') %}
        {% set day = datetime.strftime('%d') | int %}
        {%
          set suffix = 'st' if (day % 10 == 1 and day != 11)
          else 'nd' if (day % 10 == 2 and day != 12)
          else 'rd' if (day % 10 == 3 and day != 13)
          else 'th'
        %}

        {{ weekday }} {{ month }} {{ day }}{{ suffix }}

    time_friendly:
      friendly_name: Time
      icon_template: mdi:clock
      value_template: >-
        {% set hour = states('sensor.time').split(':')[0] | int %}
        {% set minutes = states('sensor.time').split(':')[1] %}

        {{ hour }}:{{ minutes }}

    time_long:
      friendly_name: Time
      icon_template: mdi:clock
      value_template: >-
        {% set hour = states('sensor.time').split(':')[0] | int %}
        {% set minute = states('sensor.time').split(':')[1] | int %}

        {% set minute_str = '' %}
        {% if minute == 15 or minute == 45 %}
          {% set minute_str = 'a quarter' %}
        {% elif minute == 30 %}
          {% set minute_str = 'half' %}
        {% else %}
          {% if minute > 30 %}
            {% set minute_str = (60 - minute) | string %}
          {% elif minute != 0 %}
            {% set minute_str = minute | string %}
          {% endif %}

          {% if minute_str %}
            {% if minute > 1 %}
              {% set minute_str = minute_str + ' minutes' %}
            {% else %}
              {% set minute_str = minute_str + ' minute' %}
            {% endif %}
          {% endif %}
        {% endif %}

        {% if minute > 30 %}
          {% set minute_str = minute_str + ' to' %}
          {% set hour = hour + 1 %}
          {% if hour >= 24 %}
            {% set hour = hour - 24 %}
          {% endif %}
        {% elif minute > 0 %}
          {% set minute_str = minute_str + ' past' %}
        {% endif %}

        {% if hour == 0 %}
          {% set hour_str = 'midnight' %}
        {% elif hour == 12 %}
          {% set hour_str = 'noon' %}
        {% elif hour > 12 %}
          {% set hour_str = hour - 12 %}
        {% else %}
          {% set hour_str = hour %}
        {% endif %}

        {% if minute_str %}
          {{ minute_str }} {{ hour_str }}
        {% elif hour != 0 and hour != 12 %}
          {{ hour_str }} O'Clock
        {% else %}
          {{ hour_str }}
        {% endif %}

    time_quarterly:
      friendly_name: Time
      icon_template: mdi:clock
      value_template: >-
        {% set hour = states('sensor.time').split(':')[0] | int %}
        {% set minutes = states('sensor.time').split(':')[1] | int %}

        {% if minutes >= 45 %}
          {% set minute = '45' %}
        {% elif minutes >= 30 %}
          {% set minute = '30' %}
        {% elif minutes >= 15 %}
          {% set minute = '15' %}
        {% else %}
          {% set minute = '00' %}
        {% endif %}

        {{ hour }}:{{ minute }}

    after_tomorrow:
      friendly_name: After Tomorrow
      value_template: >-
        {% set date = states('sensor.date') %}
        {% set datetime = strptime(date, '%Y-%m-%d') %}
        {% set timestamp = as_timestamp(datetime) + 2*24*60*60 %}

        {{ timestamp | timestamp_custom('%A') }}


#
# Number of days in a month
#
# Used to calculate remaining bandwidth capacity from ISP.
#
# @see /sensors/isp.yaml
#
- platform: template
  sensors:
    days_in_month:
      friendly_name: Days in Month
      icon_template: mdi:calendar
      value_template: >-
        {% set date = states('sensor.date') %}
        {% set datetime = strptime(date, '%Y-%m-%d') %}
        {% set month = datetime.month %}
        {% set year = datetime.year %}
        {% set days = 31 if month in [1,3,5,7,8,10,12]
          else 30 if month in [4,6,9,11]
          else 29 if as_timestamp(strptime(year|string + '-02-29', '%Y-%m-%d'))
          else 28
        %}

        {{ days }}

    days_remaining_in_month:
      friendly_name: Days Remaining in Month
      icon_template: mdi:calendar
      value_template: >-
        {% set days_in_month = states('sensor.days_in_month') | int %}

        {{ days_in_month - now().day }}


#
# Report on the next sun event (risings or settings)
#
- platform: template
  sensors:
    sun_state:
      friendly_name: Sun
      icon_template: >-
        {% if is_state('sun.sun', 'above_horizon') %}
          mdi:weather-sunny
        {% else %}
          mdi:weather-night
        {% endif %}
      value_template: >-
        {% if is_state('sun.sun', 'above_horizon') %}
          sets at {% set timestamp = as_timestamp(state_attr('sun.sun', 'next_setting')) | timestamp_custom('%H:%M') %} {{ timestamp.lstrip('0') }}
        {% else %}
          rises at {% set timestamp = as_timestamp(state_attr('sun.sun', 'next_rising')) | timestamp_custom('%H:%M') %} {{ timestamp.lstrip('0') }}
        {% endif %}